[
  {
    "projectId": "a6dcae6e-883d-404c-90f2-1a4fd520d906",
    "testId": "b368ccc1-6a68-4be6-b3ed-665234ac7f09",
    "userId": "a4a89408-1001-7054-90f2-fb45e45b162a",
    "title": "TC001-get_main_chat_page",
    "description": "Verify that the GET / endpoint returns the main chat interface HTML page with status code 200.",
    "code": "import requests\n\ndef test_get_main_chat_page():\n    base_url = \"http://localhost:5000\"\n    url = f\"{base_url}/\"\n    headers = {\n        \"Accept\": \"text/html\"\n    }\n\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n    except requests.RequestException as e:\n        assert False, f\"Request to get main chat page failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    content_type = response.headers.get(\"Content-Type\", \"\")\n    assert \"text/html\" in content_type, f\"Expected Content-Type to be text/html but got {content_type}\"\n    assert len(response.text) > 0, \"Response HTML content is empty\"\n\ntest_get_main_chat_page()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T07:16:02.869Z",
    "modified": "2025-09-26T07:16:24.704Z"
  },
  {
    "projectId": "a6dcae6e-883d-404c-90f2-1a4fd520d906",
    "testId": "1a747a1e-8321-45fe-9aab-07148b95ec60",
    "userId": "a4a89408-1001-7054-90f2-fb45e45b162a",
    "title": "TC002-websocket_connection_establishment",
    "description": "Test the WebSocket connection endpoint /socket.io/ to ensure it establishes a connection successfully and returns status code 101.",
    "code": "import socketio\n\nWS_ENDPOINT = 'http://localhost:5000'\n\nsio = socketio.Client()\n\ndef test_websocket_connection_establishment():\n    try:\n        sio.connect(WS_ENDPOINT, transports=['websocket'])\n        assert sio.connected is True, 'WebSocket connection not open.'\n        sio.disconnect()\n    except Exception as e:\n        assert False, f'WebSocket connection failed: {e}'\n\nif __name__ == '__main__':\n    test_websocket_connection_establishment()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 1, in <module>\nModuleNotFoundError: No module named 'socketio'\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T07:16:02.878Z",
    "modified": "2025-09-26T07:16:42.161Z"
  },
  {
    "projectId": "a6dcae6e-883d-404c-90f2-1a4fd520d906",
    "testId": "9e90215a-d3ed-4216-a848-52bd4425388a",
    "userId": "a4a89408-1001-7054-90f2-fb45e45b162a",
    "title": "TC003-join_chat_room_with_valid_data",
    "description": "Test the POST /join_chat endpoint with valid username, language, and optional room to ensure the user can join the chat room successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_join_chat_room_with_valid_data():\n    url = f\"{BASE_URL}/join_chat\"\n    payload = {\n        \"username\": \"testuser123\",\n        \"language\": \"en\",\n        \"room\": \"general\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request to join chat room failed: {str(e)}\"\n\ntest_join_chat_room_with_valid_data()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in test_join_chat_room_with_valid_data\nAssertionError: Expected status code 200 but got 400\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T07:16:02.885Z",
    "modified": "2025-09-26T07:17:08.207Z"
  },
  {
    "projectId": "a6dcae6e-883d-404c-90f2-1a4fd520d906",
    "testId": "201987eb-6081-4d7f-98bb-96aef2656576",
    "userId": "a4a89408-1001-7054-90f2-fb45e45b162a",
    "title": "TC004-send_message_with_translation",
    "description": "Verify that POST /send_message sends a message and that the message is automatically translated for users with different language preferences, returning the correct message response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\n# Since the PRD does not specify an authentication mechanism, use the session from join_chat to preserve user context for send_message.\n\n# We use requests.Session to maintain cookies or session context if server depends on it.\ndef test_send_message_with_translation():\n    headers = {\"Content-Type\": \"application/json\"}\n\n    session1 = requests.Session()\n    session2 = requests.Session()\n\n    user1 = {\"username\": \"user1\", \"language\": \"english\", \"room\": \"testroom123\"}\n    user2 = {\"username\": \"user2\", \"language\": \"spanish\", \"room\": \"testroom123\"}\n\n    # User 1 joins chat room\n    resp_join_1 = session1.post(f\"{BASE_URL}/join_chat\", json=user1, headers=headers, timeout=TIMEOUT)\n    assert resp_join_1.status_code == 200, f\"User1 failed to join chat room: {resp_join_1.text}\"\n\n    # User 2 joins same chat room\n    resp_join_2 = session2.post(f\"{BASE_URL}/join_chat\", json=user2, headers=headers, timeout=TIMEOUT)\n    assert resp_join_2.status_code == 200, f\"User2 failed to join chat room: {resp_join_2.text}\"\n\n    # User 1 sends a message in English\n    message_content = \"Hello, how are you?\"\n    send_msg_payload = {\"content\": message_content}\n    resp_send = session1.post(f\"{BASE_URL}/send_message\", json=send_msg_payload, headers=headers, timeout=TIMEOUT)\n    assert resp_send.status_code == 200, f\"Send message failed: {resp_send.text}\"\n\n    message_response = resp_send.json()\n    # Validate response keys and types\n    assert \"username\" in message_response and isinstance(message_response[\"username\"], str)\n    assert \"content\" in message_response and isinstance(message_response[\"content\"], str)\n    assert \"timestamp\" in message_response and isinstance(message_response[\"timestamp\"], str)\n    assert \"is_translated\" in message_response and isinstance(message_response[\"is_translated\"], bool)\n    assert \"is_own\" in message_response and isinstance(message_response[\"is_own\"], bool)\n\n    # The username must match user1\n    assert message_response[\"username\"] == user1[\"username\"]\n    assert message_response[\"content\"] == message_content\n    assert message_response[\"is_own\"] is True\n\n    # User2 sends message\n    user2_message = \"¿Cómo estás?\"\n    resp_send_user2 = session2.post(f\"{BASE_URL}/send_message\", json={\"content\": user2_message}, headers=headers, timeout=TIMEOUT)\n    assert resp_send_user2.status_code == 200, f\"Send message by user2 failed: {resp_send_user2.text}\"\n    resp_user2_msg = resp_send_user2.json()\n\n    assert \"username\" in resp_user2_msg and isinstance(resp_user2_msg[\"username\"], str)\n    assert resp_user2_msg[\"username\"] == user2[\"username\"]\n    assert \"content\" in resp_user2_msg and isinstance(resp_user2_msg[\"content\"], str)\n    assert \"timestamp\" in resp_user2_msg and isinstance(resp_user2_msg[\"timestamp\"], str)\n    assert \"is_translated\" in resp_user2_msg and isinstance(resp_user2_msg[\"is_translated\"], bool)\n    assert \"is_own\" in resp_user2_msg and resp_user2_msg[\"is_own\"] is True\n    assert resp_user2_msg[\"content\"] == user2_message\n\n\n    # No cleanup possible without API endpoint\n\n\ntest_send_message_with_translation()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 63, in <module>\n  File \"<string>\", line 35, in test_send_message_with_translation\nAssertionError\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T07:16:02.891Z",
    "modified": "2025-09-26T07:17:29.639Z"
  },
  {
    "projectId": "a6dcae6e-883d-404c-90f2-1a4fd520d906",
    "testId": "02bf8f19-3654-4c06-a507-ed7612ceaebe",
    "userId": "a4a89408-1001-7054-90f2-fb45e45b162a",
    "title": "TC005-change_user_language_preference",
    "description": "Test the POST /change_language endpoint to update the user's preferred language and verify that subsequent messages are translated accordingly.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_change_user_language_preference():\n    session = requests.Session()\n    headers = {\"Content-Type\": \"application/json\"}\n    username = \"testuser_tc005\"\n    initial_language = \"english\"\n    new_language = \"spanish\"\n    room = \"general\"\n    try:\n        # Step 1: Join chat room with initial language preference\n        join_payload = {\n            \"username\": username,\n            \"language\": initial_language,\n            \"room\": room\n        }\n        join_resp = session.post(f\"{BASE_URL}/join_chat\", json=join_payload, headers=headers, timeout=TIMEOUT)\n        assert join_resp.status_code == 200, f\"Join chat failed: {join_resp.status_code} {join_resp.text}\"\n\n        # Step 2: Change language preference\n        change_lang_payload = {\n            \"language\": new_language\n        }\n        change_lang_resp = session.post(f\"{BASE_URL}/change_language\", json=change_lang_payload, headers=headers, timeout=TIMEOUT)\n        assert change_lang_resp.status_code == 200, f\"Change language failed: {change_lang_resp.status_code} {change_lang_resp.text}\"\n\n        # Step 3: Send a message after language change\n        message_text = \"Hello, how are you?\"\n        send_message_payload = {\n            \"content\": message_text\n        }\n        send_resp = session.post(f\"{BASE_URL}/send_message\", json=send_message_payload, headers=headers, timeout=TIMEOUT)\n        assert send_resp.status_code == 200, f\"Send message failed: {send_resp.status_code} {send_resp.text}\"\n        send_resp_json = send_resp.json()\n\n        # Validate message response fields\n        assert \"username\" in send_resp_json, \"Response missing 'username'\"\n        assert isinstance(send_resp_json[\"username\"], str), \"Username should be a string in response\"\n        assert \"content\" in send_resp_json, \"Response missing 'content'\"\n        assert \"timestamp\" in send_resp_json, \"Response missing 'timestamp'\"\n        assert \"is_translated\" in send_resp_json, \"Response missing 'is_translated'\"\n        assert \"is_own\" in send_resp_json, \"Response missing 'is_own'\"\n\n        # Since user changed language to Spanish, the message should be marked as translated\n        # and content should differ from original if translation is working properly.\n        # We can only assert that is_translated is True and is_own is True.\n        assert send_resp_json[\"is_translated\"] is True, \"Message should be translated after language change\"\n        assert send_resp_json[\"is_own\"] is True, \"Message should be marked as own\"\n\n        # Additionally check content differs (basic check, may not apply if translation returns same text)\n        translated_content = send_resp_json[\"content\"]\n        assert isinstance(translated_content, str) and len(translated_content) > 0, \"Translated content missing or empty\"\n        # If translated content is exactly same as original for this English->Spanish test, \n        # it's possible no translation was applied, but we accept this as valid for test completeness.\n    finally:\n        # Clean up: no explicit delete endpoint available; if any logout or cleanup needed, it can be added here.\n        session.close()\n\ntest_change_user_language_preference()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 62, in <module>\n  File \"<string>\", line 42, in test_change_user_language_preference\nAssertionError: Response missing 'content'\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T07:16:02.897Z",
    "modified": "2025-09-26T07:17:29.636Z"
  },
  {
    "projectId": "a6dcae6e-883d-404c-90f2-1a4fd520d906",
    "testId": "ae60f155-00c0-4f4f-9821-943bf6dfc37b",
    "userId": "a4a89408-1001-7054-90f2-fb45e45b162a",
    "title": "TC006-translate_text_using_ollama_api",
    "description": "Verify that POST /translate correctly translates text from the source language to the target language using the Ollama API and handles errors gracefully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_translate_text_using_ollama_api():\n    url = f\"{BASE_URL}/translate\"\n\n    # Test valid translation request\n    payload_valid = {\n        \"text\": \"Hello, world!\",\n        \"source_language\": \"en\",\n        \"target_language\": \"es\"\n    }\n    try:\n        response = requests.post(url, json=payload_valid, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK, got {response.status_code}\"\n        data = response.json()\n        assert \"translated_text\" in data, \"Response JSON missing 'translated_text'\"\n        assert isinstance(data[\"translated_text\"], str), \"'translated_text' should be a string\"\n        assert len(data[\"translated_text\"]) > 0, \"'translated_text' should not be empty\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # Test missing required fields (no text)\n    payload_missing_text = {\n        \"target_language\": \"fr\"\n    }\n    try:\n        response = requests.post(url, json=payload_missing_text, headers=HEADERS, timeout=TIMEOUT)\n        # Expecting error status code, could be 400 or 422 depending on API error handling\n        assert response.status_code >= 400, f\"Expected client error for missing text, got {response.status_code}\"\n    except requests.RequestException as e:\n        # If network error, fail the test\n        assert False, f\"Request failed: {e}\"\n\n    # Test invalid target language\n    payload_invalid_lang = {\n        \"text\": \"Hello\",\n        \"target_language\": \"invalid-lang-code\"\n    }\n    try:\n        response = requests.post(url, json=payload_invalid_lang, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK for invalid target language, got {response.status_code}\"\n        data = response.json()\n        assert \"translated_text\" in data, \"Response JSON missing 'translated_text' for invalid target language\"\n        assert isinstance(data[\"translated_text\"], str), \"'translated_text' should be a string for invalid target language\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # Test auto-detection of source language (no source_language field)\n    payload_auto_source = {\n        \"text\": \"Bonjour\",\n        \"target_language\": \"en\"\n    }\n    try:\n        response = requests.post(url, json=payload_auto_source, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK for auto-detect, got {response.status_code}\"\n        data = response.json()\n        assert \"translated_text\" in data, \"Response JSON missing 'translated_text' for auto-detect\"\n        assert isinstance(data[\"translated_text\"], str), \"'translated_text' should be a string for auto-detect\"\n        assert len(data[\"translated_text\"]) > 0, \"'translated_text' should not be empty for auto-detect\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_translate_text_using_ollama_api()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T07:16:02.903Z",
    "modified": "2025-09-26T07:17:02.721Z"
  }
]
